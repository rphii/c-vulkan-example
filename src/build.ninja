root = .
bdir = build

cc = gcc
optimize = -O2 -march=native -mfpmath=sse
#-flto=auto -ffat-lto-objects -fgraphite-identity 
#-DNDEBUG
common = 
#-fsanitize=address -ggdb3 -rdynamic

cflags = -Wall -Wextra -Wimplicit -Wfatal-errors $
         -Wno-unused-parameter $
         $optimize $common
ldflags = -lglfw -lvulkan -lrphiic $common

rule cc
    command = $cc -MMD -MF $out.d $cflags -c $in -o $out
    depfile = $out.d

rule link
    command = $cc $ldflags -o $out $in

rule shader
    command = glslc $in -o $out

rule blobify
    command = $root/shaders/blobify.sh $in > $out

build $bdir/shaders/vert.spv: shader $root/shaders/shader.vert
build $bdir/shaders/frag.spv: shader $root/shaders/shader.frag
build $root/shaders/blob.h: blobify $bdir/shaders/vert.spv $bdir/shaders/frag.spv

build $bdir/main.o: cc $root/main.c
build $bdir/app.o: cc $root/app.c
build $bdir/queue_family.o: cc $root/queue_family.c
build $bdir/optional.o: cc $root/optional.c
build $bdir/log.o: cc $root/log.c
build $bdir/vec.o: cc $root/vec.c
build $bdir/swap_chain_support.o: cc $root/swap_chain_support.c



build c-vulkan: link $bdir/main.o $bdir/app.o $bdir/queue_family.o $bdir/optional.o $
    $bdir/log.o $bdir/vec.o $bdir/swap_chain_support.o $root/shaders/blob.h $


